//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Atm11
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class BankdbEntities : DbContext
    {
        public BankdbEntities()
            : base("name=BankdbEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AccType> AccTypes { get; set; }
        public virtual DbSet<AtmAccount> AtmAccounts { get; set; }
        public virtual DbSet<Transaction> Transactions { get; set; }
        public virtual DbSet<TransType> TransTypes { get; set; }
    
        public virtual ObjectResult<GetLastWeekTransaction_Result> GetLastWeekTransaction(string userid, Nullable<int> id)
        {
            var useridParameter = userid != null ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLastWeekTransaction_Result>("GetLastWeekTransaction", useridParameter, idParameter);
        }
    
        public virtual ObjectResult<GetLasttwoWeekTransaction_Result> GetLasttwoWeekTransaction(string userid, Nullable<int> id)
        {
            var useridParameter = userid != null ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLasttwoWeekTransaction_Result>("GetLasttwoWeekTransaction", useridParameter, idParameter);
        }
    
        public virtual ObjectResult<GetLastMonthTransaction_Result> GetLastMonthTransaction(string userid, Nullable<int> id)
        {
            var useridParameter = userid != null ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLastMonthTransaction_Result>("GetLastMonthTransaction", useridParameter, idParameter);
        }
    
        public virtual ObjectResult<GetcustomdateTransaction_Result> GetcustomdateTransaction(string date1, string date2, string userid, Nullable<int> id)
        {
            var date1Parameter = date1 != null ?
                new ObjectParameter("date1", date1) :
                new ObjectParameter("date1", typeof(string));
    
            var date2Parameter = date2 != null ?
                new ObjectParameter("date2", date2) :
                new ObjectParameter("date2", typeof(string));
    
            var useridParameter = userid != null ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetcustomdateTransaction_Result>("GetcustomdateTransaction", date1Parameter, date2Parameter, useridParameter, idParameter);
        }
    
        public virtual ObjectResult<GetLastFourWeekTransaction_Result> GetLastFourWeekTransaction(string userid, Nullable<int> id)
        {
            var useridParameter = userid != null ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLastFourWeekTransaction_Result>("GetLastFourWeekTransaction", useridParameter, idParameter);
        }
    
        public virtual ObjectResult<getAllTransactions_Result> getAllTransactions(Nullable<int> aid, string uid)
        {
            var aidParameter = aid.HasValue ?
                new ObjectParameter("aid", aid) :
                new ObjectParameter("aid", typeof(int));
    
            var uidParameter = uid != null ?
                new ObjectParameter("uid", uid) :
                new ObjectParameter("uid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAllTransactions_Result>("getAllTransactions", aidParameter, uidParameter);
        }
    
        public virtual ObjectResult<getAllTransaction_Result> getAllTransaction(Nullable<int> aid)
        {
            var aidParameter = aid.HasValue ?
                new ObjectParameter("aid", aid) :
                new ObjectParameter("aid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAllTransaction_Result>("getAllTransaction", aidParameter);
        }
    
        public virtual ObjectResult<GetAllTranaction1_Result> GetAllTranaction1(string userid, Nullable<int> id)
        {
            var useridParameter = userid != null ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllTranaction1_Result>("GetAllTranaction1", useridParameter, idParameter);
        }
    }
}
